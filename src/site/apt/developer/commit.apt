~~
~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.
~~

Committer Guide

%{toc}

  This page provides necessary guidelines for committers of Apache Lens.

* New Committers

  New committers are encouraged to first read Apache's generic committer documentation:

  * {{{http://www.apache.org/dev/new-committers-guide.html} New committer guide}}

  * {{{http://www.apache.org/dev/committers.html}Committer FAQ}}

  * {{{http://www.apache.org/dev/committers.html#committer-responsibilities} Committer Responsiilities}}

* Review

  Lens committers should, as often as possible, attempt to review patches submitted by others. Ideally every submitted
  patch will get reviewed by a committer within a few days. If a committer reviews a patch they've not authored,
  and believe it to be of sufficient quality, then they can commit the patch, otherwise the patch should be cancelled
  with a clear explanation for why it was rejected.

  The list of submitted patches should be ordered by Updated timestamp -
  {{{https://issues.apache.org/jira/issues/?jql=project%20%3D%20LENS%20AND%20status%20%3D%20%22Patch%20Available%22%20ORDER%20BY%20updated%20DESC%2C%20priority%20DESC} Lens patch available issues}}
  Committers should scan the list from one which was updated first, looking for patches that they feel
  qualified to review and possibly commit.

  The committers are allowed to commit their own patch only if the patch first receives a +1 vote from another
  committer.

  Some things that are important to check for in patches

  * Code style as per {{{./contribute.html#Code_compliance}coding guidelines in contributer guide}}

  * Correctness of the patch

  * Exception handling and thread safety

  * Log levels

  * Documentation (project documentation, javadoc, feature design docs)

  * Any assumptions made in the patch that might not be practical or that could be cumbersome to manage

  * Increase in complexity of installation, use, or operability

  Patches should be rejected which do not adhere to the guidelines above and
   {{{./contribute.html#Code_compliance}code compliance guidelines in contributer guide}}. Committers should always
  be polite to contributors and try to instruct and encourage them to contribute better patches. If a committer
  wishes to improve an unacceptable patch, then it should first be rejected, and a new patch should be attached by
  the committer for review.

* Commit

  When you commit a patch, please:

  * Ensure that all tests pass with patch applied.

  * Ensure that the patch has a +1 vote from another committer or yourself.

  * Ensure that 24 hours have elapsed since the jira is made patch available. As a practice we should observe this,
   but it should be possible to consciously override and commit with a shorter turnaround time.

  * Apply the patch attached on jira. The patch should licensed under apache license.

+---+

  git apply -p0 <final-patch>.patch

+---+

  * Don't forget to do 'git add' on any new files, and 'git rm' on any files that have been 'deleted' by the patch.

  * Include the Jira issue id in the commit message, along with a short description of the change and the name of the
    contributor. Be sure to get the issue id right, as this causes Jira to link to the change in git.

+---+

    Example commit message: "LENS-123. Adds awesome feature to lens. (Jaideep Dhok via amareshwari)"

+---+

  * Push the commit to master branch

  * Resolve the issue as fixed, thanking the contributor. Always set the "Fix Version" at this point.

  * Put incompatibility flags on, if the change is an incompatible change.

  * Add appropriate release note about what the issue is fixing. New features should have elobarate release note on
  how to use the feature.

* Backporting patches

  Once the patch is pushed to master, it can be cherry-picked and applied on other major version lines. 
  If the patch is not applicable for master and only applicable to the release version, then above guide lines of
  review and commit needs to be followed with change of committing branch to be the release branch.

  Fix version needs to include this release version as well.

* Becoming a committer

  "What do I need to do in order to become a committer?" The simple (though frustrating) answer to this question
   is, "If you want to become a committer, behave like a committer." If you follow this advice, then rest assured
   that the PMC will notice, and committership will seek you out rather than the other way around.
   So besides continuing to contribute high-quality code and tests, there are many other things that you should
   naturally be undertaking as part of getting deeper into the project's life:

   * Help out users and other developers on the mailing lists, in JIRA, and in IRC

   * Review and test the patches submitted by others; this can help to offload the burden on existing
   committers, who will definitely appreciate your efforts

   * Participate in discussions about releases, roadmaps, architecture, and long-term plans

   * Help improve the website and the wiki

   * Participate in (or even initiate) real-world events such as user/developer meetups,
    papers/talks at conferences, etc

   * Improve project infrastructure in order to increase the efficiency of committers and other contributors

   * Help raise the project's quality bar (e.g. by setting up code coverage analysis)

   * As much as possible, keep your activity sustained rather than sporadic
